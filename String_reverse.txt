%macro print 2
    mov rax, 1            ; Syscall for write
    mov rdi, 1            ; File descriptor: stdout
    mov rsi, %1           ; Buffer address
    mov rdx, %2           ; Buffer length
    syscall
%endmacro

%macro read 2
    mov rax, 0            ; Syscall for read
    mov rdi, 0            ; File descriptor: stdin
    mov rsi, %1           ; Buffer address
    mov rdx, %2           ; Buffer size
    syscall
%endmacro

section .data
    m1 db "Enter String: ", 0xA   ; Prompt to enter string
    l1 equ $-m1
    m2 db "Length of String: ", 0xA
    l2 equ $-m2
    m3 db "Reversed String: ", 0xA
    l3 equ $-m3

section .bss
    string resb 50                ; Input string buffer
    string2 resb 50               ; Reversed string buffer
    length resd 1                 ; Length of the string
    length_str resb 16            ; String representation of length

section .text
    global _start

_start:
    ; Prompt and read string
    print m1, l1
    read string, 50

    ; Calculate string length (excluding newline)
    mov rsi, string
    xor rcx, rcx                   ; Reset length counter
find_length:
    cmp byte [rsi], 0xA            ; Check for newline
    je done_length                 ; Stop at newline
    cmp byte [rsi], 0              ; Stop if null-terminated
    je done_length
    inc rsi
    inc rcx
    jmp find_length
done_length:
    mov [length], ecx              ; Store length

    ; Print the length
    print m2, l2
    mov rax, [length]
    xor rcx, rcx                   ; Reset RCX
    mov rsi, length_str + 15       ; Point to end of buffer
    mov byte [rsi], 0              ; Null-terminate
length_to_str:
    xor rdx, rdx
    div dword 10                   ; Divide by 10
    add dl, '0'                    ; Convert remainder to ASCII
    dec rsi
    mov [rsi], dl
    inc rcx
    test rax, rax                  ; Check if quotient is 0
    jnz length_to_str
    print rsi, rcx                 ; Print the length as a string

    ; Reverse the string
    print m3, l3
    mov rsi, string                ; Source: original string
    mov rdi, string2               ; Destination: reversed string
    mov ecx, [length]
    add rdi, rcx
    dec rdi                        ; Point to the last position
reverse_loop:
    mov al, [rsi]
    mov [rdi], al
    inc rsi
    dec rdi
    loop reverse_loop

    ; Print the reversed string
    print string2, [length]

    ; Exit
    mov rax, 60                    ; Syscall for exit
    xor rdi, rdi                   ; Return code 0
    syscall
